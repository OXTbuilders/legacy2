# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Create the list of override repos
repos = ['blktap', 'bootage', 'dm-agent', 'dm-wrapper', 'fbtap', 'gene3fs', 'icbinn', 'idl', 'input', 'installer', 'ioemu', 'libedid', 'libpciemu', 'libxcdbus', 'libxenbackend', 'manager', 'meta-selinux','msi-installer', 'network', 'ocaml', 'openxt', 'polmod-example', 'pv-linux-drivers', 'qemu-dm', 'resized', 'sdk', 'seabios', 'selinux-policy', 'surfman', 'sync-cli', 'sync-client', 'sync-database', 'sync-server', 'sync-ui-helper', 'sync-wui', 'toolstack', 'toolstack-data', 'uid', 'v4v', 'win-tools', 'xblanker', 'xclibs', 'xctools', 'xc-vusb', 'xc-vusb-daemon', 'vusb-daemon', 'xc-windows', 'xenaccess', 'xenclient-oe', 'xenclient-oe-extra', 'xenfb2', 'xsm-policy']

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("legacy2", "password", max_builds=1)]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
#c['change_source'].append(GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import StringParameter
from buildbot.schedulers import timed

c['schedulers'] = []

prop = []
prop.append(StringParameter(name="distro", label="DISTRO: ", default="openxt-main", size=25))
prop.append(StringParameter(name="ticket", label="Jira Issue: ", default="", size=25))
for repo in repos:
    prop.append(StringParameter(name=repo+"url", label=repo+" URL: <br>", default="", size=40))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["openxt-legacy2"],
                            branch=StringParameter(name="branch", default="stable-5"),
                            properties=prop))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
#from buildbot.steps.source.git import Git
#from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.process.properties import Property

factory = BuildFactory()
# check out the source
#factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(ShellCommand(command=["trial", "pyflakes"]))
factory.addStep(Compile(command=["bash", "-e", "./fetch.sh", Property('buildnumber')], name="Fetch", timeout=12000, description="Fetch", descriptionDone="Fetched"))
factory.addStep(Compile(command=["bash", "-e", "./clean.sh"], name="Clean", timeout=12000, description="Clean", descriptionDone="Cleaned"))
factory.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch'),Property('layers'), Property('repos'), Property('ticket'), Property('distro')], name="Build", timeout=12000, description="Build", descriptionDone="Built"))
factory.addStep(Compile(command=["bash", "-e", "./copy.sh", Property('buildnumber'), Property('branch')],  name="Copy",  timeout=12000, description="Copy",  descriptionDone="Copied"))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="openxt-legacy2",
      slavenames=["legacy2"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.web.auth import HTPasswdAuth

#authz_cfg=authz.Authz(
#    # change any of these to True to enable; see the manual for more
#    # options
#    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
#    gracefulShutdown = False,
#    forceBuild = 'auth', # use this to test your slave once it is set up
#    forceAllBuilds = 'auth',  # ..or this
#    pingBuilder = False,
#    stopBuild = False,
#    stopAllBuilds = False,
#    cancelPendingBuild = False,
#)
#c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

authz_cfg = authz.Authz(auth=HTPasswdAuth('/home/buildbot/master/.htpasswd'),
                        forceBuild='auth', stopBuild='auth', pingBuilder=True,
                        cancelPendingBuild='auth', cleanShutdown='auth', cancelAllPendingBuilds='auth',
                        stopAllBuilds='auth', gracefulShutdown='auth', forceAllBuilds='auth',
                        pauseSlave='auth')
c['status'].append(html.WebStatus(http_port=8040, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenXT"
c['titleURL'] = "https://github.com/OpenXT"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8040/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
